import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:akebi2/navigator.dart';

class TutorialScreen extends StatefulWidget {
  @override
  _TutorialScreenState createState() => _TutorialScreenState();
}

class _TutorialScreenState extends State<TutorialScreen> {
  final _formKey = GlobalKey<FormState>();

  String _sei = '';
  String _mei = '';
  String _height = '';
  String _bloodType = 'A';
  String _life = 'ÂÆüÂÆ∂';
  String? _birthday;
  String? _characterReaction;

  final List<String> bloodTypes = ['A', 'B', 'O', 'AB'];
  final List<String> lifeOptions = ['ÂÆüÂÆ∂', 'ÂØÆ'];

  final Map<String, String> characterReactions = {
    'Â∞èË∑Ø': 'ÁßÅ„Å®Âêå„Åò„Å†ÔºÅÔºÅ',
    'ÈÄèÂ≠ê': 'Êàë„ÇâÈÄèÂ≠ê„Ç∑„Çπ„Çø„Éº„Ç∫ÔºÅÔºÅ',
    'ÂÆü': '...Áîü„ÅçÁâ©„ÅØÂ•Ω„Åç„Åß„Åô„ÅãÔºü',
    'Ê†πÂ≠ê': 'zzzÔºàÂ§¢„ÅÆ‰∏≠„ÅßÊå®Êã∂„Åó„Å¶„ÅÑ„ÇãÔºâ',
    'Ê±üÂà©Ëä±': '„ÅÇ„Çâ„ÄÅÂêå„Åò„Å™„Çì„Å¶Â•áÈÅá„Å≠',
    'Êô∫‰πÉ': '„ÅÇ„Å£„ÄÅ„Åà„Å£„Å®...„Çà„Çç„Åó„Åè„Å≠ÔºÅ',
    'ÁíÉÂ§ÆÂ•à': '„ÇÅ„Å°„ÇÉÂÅ∂ÁÑ∂ÔºÅ„Çà„Çç„Åó„Åè„Å≠ÔºÅ',
    'ÈÄ¢': '„Å∏„Åà„ÄÅ„ÅÑ„ÅÑÂêçÂâç„Åó„Å¶„Çã„Åò„ÇÉ„Å™„ÅÑ„ÄÇ„Çà„Çç„Åó„Åè',
    'ÊôØ': 'Âêå„Åò„Å†...„Å°„Çá„Å£„Å®Â¨â„Åó„ÅÑ...',
    'ÈÆéÁæé': '„Çè„ÅÅ„Å®„Åä„Çì„Å™„Åò„Å†„ÄÇ„Åë„ÇÑ„Åê„Å™„Å£„Å¶„Åè„Çå„Å™„Åå„ÄÇ',
    'ËàûË°£': '„ÅÜ„Çì„ÄÅ„Çà„Çç„Åó„Åè„ÄÇ',
    'ÈùñÂ≠ê': '„Å™„Çì„ÅãÈÅãÂëΩÊÑü„Åò„Å°„ÇÉ„Çè„Å™„ÅÑÔºü‰ª≤ËâØ„Åè„Åó„Çà„ÄúÔºÅ',
    '„Çä„Çä': 'Áèç„Åó„ÅÑÂêçÂâç„ÇÑ„Å™„ÅÅ„ÄÇ„Çà„Çç„Äú„ÄÇ',
    'Ëõç': '‰ª≤ËâØ„Åè„Åó„Çà„Éº„Å≠„ÄÇ',
    'ÁîüÈùô': 'ÁîüÈùô„Å£„Å¶ÁßÅ‰ª•Â§ñ„Å´„ÇÇ„ÅÑ„Çã„Çì„Å†...',
    'Áû≥': '...„Çà„Çç„Åó„Åè„ÄÇ',
    '„É¶„ÉØ': '„ÅäÊØç„Åï„Çì„Å®Âêå„Åò„Å†...!',
    '„Çµ„Éà': '„ÅäÁà∂„Åï„Çì„Å®„Åä„Çì„Å™„ÅòÔºÅ',
    'Ëä±Á∑í': '„Å≠„Åà„Å≠„Åà„ÄÅËä±Á∑í„Å®‰∏ÄÁ∑í„Å´ÈÅä„Å∞„Å™„ÅÑÔºü',
    'Â∏ÜÂëº': 'ÂÉï„ÅØÂÉï„ÄÇÂêõ„ÅØÂêõ„Å†„ÄÇ',
    '„Ç¢„É≥„É™': '„Ç¢„É≥„É™...!„ÅÑ„Åà„ÄÅ„Å™„Çì„Åß„ÇÇ„Å™„ÅÑ„Çè„ÄÇ',
    'Á©∫Êú®': 'Ôºà„Å™„Çì„ÅãË®Ä„Åà„Å™„Çì„ÅãË®Ä„Åà„Å™„Çì„ÅãÂÆ∂„Å™„Çì„Åã„ÅÑ„ÅÑÂÆ∂Ôºâ...ÂõõÂèãÂõ£„Å´ËààÂë≥„ÅØÔºü',
    'È†º': 'ÔºìÁµÑ„ÅÆÊãÖ‰ªª„Åß„Åô„ÄÇ',
  };

  void _completeTutorial() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('tutorial_completed', true);
      await prefs.setString('user_sei', _sei);
      await prefs.setString('user_mei', _mei);
      await prefs.setString('user_height', _height);
      await prefs.setString('user_blood', _bloodType);
      await prefs.setString('user_life', _life);
      await prefs.setString('user_birthday', _birthday ?? ''); // ‚Üê ‰øùÂ≠ò

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => MainNavigator()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('„É¶„Éº„Ç∂„ÉºÁôªÈå≤')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              Text(
                '„ÅÇ„Å™„Åü„ÅØËùãÊ¢ÖÂ≠¶Âúí1Âπ¥1ÁµÑ„ÅÆÁîüÂæí„Åß„Åô„ÄÇ„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
                style: TextStyle(fontSize: 18),
              ),

              TextFormField(
                decoration: InputDecoration(labelText: 'Âßì'),
                onSaved: (value) => _sei = value ?? '',
                validator: (value) => value == null || value.isEmpty ? 'Âßì„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' : null,
              ),

              TextFormField(
                decoration: InputDecoration(labelText: 'Âêç'),
                onChanged: (value) {
                  setState(() {
                    _mei = value;
                    _characterReaction = characterReactions[_mei];
                  });
                },
                onSaved: (value) => _mei = value ?? '',
                validator: (value) => value == null || value.isEmpty ? 'Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' : null,
              ),

              if (_characterReaction != null)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0, bottom: 16.0),
                  child: Text(
                    _characterReaction!,
                    style: TextStyle(fontSize: 14, color: Colors.black),
                  ),
                ),

              // üîΩ Ë™ïÁîüÊó•ÔºàDatePickerÔºâ
              ListTile(
                title: Text('Ë™ïÁîüÊó•'),
                subtitle: Text(_birthday ?? 'Êú™ÈÅ∏Êäû'),
                trailing: Icon(Icons.calendar_today),
                onTap: () async {
                  final picked = await showDatePicker(
                    context: context,
                    initialDate: DateTime(2006, 4, 1),
                    firstDate: DateTime(2000),
                    lastDate: DateTime.now(),
                  );
                  if (picked != null) {
                    setState(() {
                      _birthday =
                      "${picked.year}-${picked.month.toString().padLeft(2, '0')}-${picked.day.toString().padLeft(2, '0')}";
                    });
                  }
                },
              ),

              TextFormField(
                decoration: InputDecoration(labelText: 'Ë∫´Èï∑ÔºàcmÔºâ'),
                keyboardType: TextInputType.number,
                onSaved: (value) => _height = value ?? '',
              ),

              DropdownButtonFormField<String>(
                decoration: InputDecoration(labelText: 'Ë°ÄÊ∂≤Âûã'),
                value: _bloodType,
                items: bloodTypes
                    .map((bt) => DropdownMenuItem(value: bt, child: Text(bt)))
                    .toList(),
                onChanged: (value) => setState(() => _bloodType = value!),
              ),

              DropdownButtonFormField<String>(
                decoration: InputDecoration(labelText: '‰Ωè„ÇÄÂ†¥ÊâÄ'),
                value: _life,
                items: lifeOptions
                    .map((h) => DropdownMenuItem(value: h, child: Text(h)))
                    .toList(),
                onChanged: (value) => setState(() => _life = value!),
              ),

              SizedBox(height: 20),

              ElevatedButton(
                onPressed: _completeTutorial,
                child: Text('ÁôªÈå≤„Åó„Å¶„ÅØ„Åò„ÇÅ„Çã'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}