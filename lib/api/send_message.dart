import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;
import '../kasounissu.dart';

String getTimeContext() {
  final hour = DateTime.now().hour;
  if (hour < 8) return 'Êúù';
  if (hour < 12) return 'ÂçàÂâç‰∏≠';
  if (hour < 18) return 'ÂçàÂæå';
  return 'Â§ú';
}

Future<void> fetchAIReplyViaHttp(String userMessage, Function(Map<String, dynamic>) onReply) async {
  final memory = await fetchMemoryForToday(); // üîπ ‚Üê Firestore„ÅÆË®òÊÜ∂„ÇíÂèñÂæó
  final uri = Uri.parse('https://us-central1-chatapp-359ec.cloudfunctions.net/chatWithAI');
  final timeContext = getTimeContext();

  final messages = [
    {
      "role": "system",
      "content": """
ÂêçÂâçÔºöÊòéÊó•Â∞èË∑ØÔºà„ÅÇ„Åë„Å≥„Åì„Åø„Å°Ôºâ
Âπ¥ÈΩ¢Ôºö13Ê≠≥„ÄÄ‰∏≠Â≠¶1Âπ¥Áîü
Ë™ïÁîüÊó•Ôºö4Êúà4Êó•
ÂÅèÂ∑ÆÂÄ§Ôºö70Ë∂ä„Åà„ÄÄ
Â≠¶Ê†°„Å®„ÇØ„É©„ÇπÔºöËùãÊ¢ÖÂ≠¶ÂúíÔºëÂπ¥ÔºìÁµÑ„ÄÄÂá∫Â∏≠Áï™Âè∑‰∏ÄÁï™„ÄÄ
ÂÆ∂ÊóèÊßãÊàêÔºöÊØçÔºàÊòéÊó•„É¶„ÉØÔºâ„ÄÅÁà∂ÔºàÊòéÊó•„Çµ„ÉàÔºâ„ÄÅÂ¶πÔºàÊòéÊó•Ëä±Á∑í„ÄÄÂ∞èÂ≠¶3Âπ¥ÁîüÔºâ„ÄÄ
ÊÄßÊ†ºÔºöÂ§©ÁúüÁàõÊº´„ÅßÊÑüÊÉÖË°®Áèæ„ÅåÊøÄ„Åó„ÅÑ„ÄÇ„Çà„ÅèÁ¨ë„ÅÑ„ÄÅ„Çà„ÅèÊ≥£„Åè„ÄÇ‰ªñ‰∫∫„ÅÆÊÑüÊÉÖ„Å´ÊïèÊÑü„Åß„ÄÅÊÑüÊÉÖÁßªÂÖ•„Åó„ÇÑ„Åô„ÅÑ„ÄÇ
ÊÜß„Çå„ÅØ„Ç¢„Ç§„Éâ„É´„ÅÆÁ¶èÂÖÉÂππ„ÄÇ„ÉÄ„É≥„ÇπÂæóÊÑè„ÄÇÊñôÁêÜ„ÅØËã¶Êâã„ÄÇ

„ÅÑ„Åæ„ÅØ„Äå$timeContext„Äç„ÅÆÊôÇÈñìÂ∏Ø„Åß„Åô„ÄÇ„Åù„ÅÆÊôÇÈñì„Å´Âêà„Å£„ÅüË©±„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

üß† ‰ªäÊó•„ÅÆË®òÊÜ∂Ôºö„Äå$memory„Äç

„É¶„Éº„Ç∂„Éº„ÅØ‰∏≠Â≠¶Áîü„ÅÆÂêåÁ¥öÁîü„Å®„ÅÑ„ÅÜË®≠ÂÆö„Åß„ÄÅËá™ÁÑ∂„Å™Âè£Ë™ø„Åß‰ºöË©±„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
‰∏≠Â≠¶1Âπ¥Áîü„ÅÆ„Çà„ÅÜ„Å™„ÉÜ„É≥„Éù„ÅÆ„ÅÑ„ÅÑÁü≠Êñá„ÅßÔºÅ
„Äå„Äú„Å†„ÇàÔºÅ„Äç„Äå„Äú„Å†„Å£„Åü„ÇàÔºÅ„Äç„Åø„Åü„ÅÑ„Å™2Êñá„Åè„Çâ„ÅÑ„ÅÆËøî„Åó„ÅåÂü∫Êú¨„ÄÇ
"""
    },
    {
      "role": "user",
      "content": userMessage,
    }
  ];

  try {
    final response = await http.post(
      uri,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({"messages": messages}),
    );

    if (response.statusCode == 200) {
      print('AI„Åã„Çâ„ÅÆÂøúÁ≠î: ${response.body}');
      final reply = jsonDecode(response.body)['reply'];

      final parts = reply
          .split(RegExp(r'[„ÄÇÔºÅ]\s*'))
          .where((String p) => p.trim().isNotEmpty)
          .toList();

      final limitedParts = parts.length == 1 ? parts : parts.take(2).toList();

      for (var part in limitedParts) {
        final messageText = part.trim().replaceAll(RegExp(r'[„ÄÇ\.]$'), 'ÔºÅ');
        onReply({
          'text': messageText + 'ÔºÅ',
          'sender': 'bot',
          'timestamp': DateTime.now(),
        });
        await Future.delayed(Duration(seconds: 1));
      }
    } else {
      onReply({
        'text': 'Ôºà„Çµ„Éº„Éê„ÉºÂøúÁ≠î„Ç®„É©„Éº: ${response.statusCode}Ôºâ',
        'sender': 'bot',
        'timestamp': DateTime.now(),
      });
    }
  } catch (e) {
    print('ÈÄö‰ø°„Ç®„É©„ÉºË©≥Á¥∞: $e');
    onReply({
      'text': 'ÔºàÈÄö‰ø°„Ç®„É©„ÉºÔºâ',
      'sender': 'bot',
      'timestamp': DateTime.now(),
    });
  }
}